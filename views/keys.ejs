<html lang="en">
    <%- include('./partials/head.ejs')  %> 
<body>
    <%- include('./partials/nav.ejs')  %> 

    <div class="content keys">
        <h2>Keys and Samples</h2>
        <div class="keyboard">
        <% if (keys.length > 0) { %>
            <% keys.forEach((thekey, index) => { %>
            <div class="key <%- thekey.enabled ? 'active' : null %>" id="<%= thekey.key %>" data-pitch=<%= thekey.pitch %> data-enabled=<%= thekey.enabled %> data-newsound=<%= thekey.newSound %> data-index='<%= index %>' >
                    <h3><%= thekey.key %></h3>
                    <p><%= thekey.pitch.toUpperCase().replace('M', '#') %></p>
            </div>
            <% }) %>
        <% } else { %>
            <p>No key to display</p>
        <% } %>
        </div>
        <div class="hidden" id="transparentScreen" onclick="keyPanel()">
        </div>
        <div class="content forms keyPanels hidden" id="keyPanel">
            <div class="closebtn" onclick="keyPanel()"></div>

            <h2>Key: <span id="keyName"></span> Note: <span id="noteName"><span></h2>
            <form id="keyForm" action="/keys" method="POST" enctype="multipart/form-data">
                <div class="left flex">
                    <div class="formItem">
                    <label for="enabled">Enabled</label>
                    <input type="checkbox" id="enabled" name="enabled" />
                    </div>
                    <div class="formItem">
                    <label for="pitch">Note</label>
                    <select id="pitch" name="pitch">
                        <option value="c5">C5</option>
                        <option value="cm5">C#5</option>
                        <option value="d5">D5</option>
                        <option value="dm5">D#5</option>
                        <option value="e5">E5</option>
                        <option value="f5">F5</option>
                        <option value="fm5">F#5</option>
                        <option value="g5">G5</option>
                        <option value="gm5">G#5</option>
                        <option value="a5">A5</option>
                        <option value="am5">A#5</option>
                        <option value="b5">B5</option>
                        
                        <option value="c4">C4</option>
                        <option value="cm4">C#4</option>
                        <option value="d4">D4</option>
                        <option value="dm4">D#4</option>
                        <option value="e4">E4</option>
                        <option value="f4">F4</option>
                        <option value="fm4">F#4</option>
                        <option value="g4">G4</option>
                        <option value="gm4">G#4</option>
                        <option value="a4">A4</option>
                        <option value="am4">A#4</option>
                        <option value="b4">B4</option>

                        <option value="c3">C3</option>
                        <option value="cm3">C#3</option>
                        <option value="d3">D3</option>
                        <option value="dm3">D#3</option>
                        <option value="e3">E3</option>
                        <option value="f3">F3</option>
                        <option value="fm3">F#3</option>
                        <option value="g3">G3</option>
                        <option value="gm3">G#3</option>
                        <option value="a3">A3</option>
                        <option value="am3">A#3</option>
                        <option value="b3">B3</option>
                    </select>
                    </div>
                    <div class="formItem">
                        <label for="new-sound">New Sound</label>
                        <input type="checkbox" id="newsound" name="newsound"
                         onclick="showFileBtn()" />
                    </div>
                    <input id="hiddenKeyName" type="hidden" name="key">
                </div>
                <div class="right" id="soundBtn">
                    <input type="file" width="400" class="filebtn" name="soundfile" id="soundfile" style="padding: 15px;">
                </div>
            <!-- </div> -->
                <button>Save</button>
            </form>

        </div>
        
    </div>
    <%- include('./partials/footer.ejs') %> 
    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <script src="js/ejs.js"></script>
    <script>
        var thekeys = <%- JSON.stringify(keys) %> ;
        var username = <%- JSON.stringify(name) %> ;

        // Open and close key panel
        function keyPanel() {
            let keyPanelWrap = document.querySelector('#keyPanel');
            let allPanels = document.querySelector('#transparentScreen');
                    if(!allPanels.classList.contains('hidden')) {
                        keyPanelWrap.classList.add('hidden');
                        allPanels.classList.add('hidden');
                    } else {
                        keyPanelWrap.classList.remove('hidden');
                        allPanels.classList.remove('hidden');
                    }
                }

        // Rendering key panel content
        $(document).on('click', '.key', function() {
            document.querySelector('#keyForm').reset();

            var index = $(this).attr('data-index');
            var thekey = thekeys[index];

            $('#keyName').html(thekey.key);
            $('#noteName').html(thekey.pitch.toUpperCase().replace('M', '#'));
            if (thekey.enabled == true) { 
                $('input#enabled').prop('checked', true); 
            } else { $('input#enabled').prop('checked', false); }
            if (thekey.newSound == true) { 
                $('input#newsound').prop('checked', true); 
                $('#soundfile').removeClass('hidden2');
            } else { 
                $('input#newsound').prop('checked', false); 
                $('#soundfile').addClass('hidden2');
            }
            var pitch = document.querySelector('#pitch');
            var opt;
            for ( var i = 0, len = pitch.options.length; i < len; i++ ) {
            opt = pitch.options[i];
            if ( opt.value === thekey.pitch ) {
                opt.setAttribute('selected', 'selected'); 
                break;
            }}
            $('#hiddenKeyName').attr('value', thekey.key);

            keyPanel();
        })

        // Update file button is visible when 'New Sound' is on
        function showFileBtn() {
        let fileBtn = document.querySelector('.filebtn');
        if ( fileBtn.classList.contains('hidden2') ) {
            fileBtn.classList.remove('hidden2');
            fileBtn.classList.add('show2');
        } else {
            fileBtn.classList.remove('show2');
            fileBtn.classList.add('hidden2');
        }
    }

    ////////// Keys to Play Sample

    $(document).ready(function() {
        var keyPlayed = false;
        console.log(thekeys);

        var fileName = [], pitchString = [];
        for (var i = 0; i < thekeys.length; i++) {
            if(thekeys[i].newSound) {
                var name = thekeys[i].key;
                var note = thekeys[i].pitch.toUpperCase().replace('M', '#');
                fileName.push(name);
                pitchString.push(note);
            }
        }

        console.log('fileName: ');
        console.log(fileName);
        console.log('pitchString: ');
        console.log(pitchString);

        var keyToPitch = {};
        for (var i = 0; i < thekeys.length; i++) {
            var thekey = thekeys[i].key.toLowerCase();
            var note = thekeys[i].pitch.toUpperCase().replace('M', '#'); 
           if(thekeys[i].enabled) {
               if(thekey == 'space') {
                // var spacekey = '(space)';
                keyToPitch[' '] = note;
               } else {
                keyToPitch[thekey] = note;
               }
            } else {
                keyToPitch[thekey] = null;
            }
        }

        console.log('Key to Pitch: ');
        console.log(keyToPitch);

        var samplers = [];
        for(i=0; i<fileName.length;i++) {
            samplers[i] = new Tone.Sampler({
            [pitchString[i]]: './sound/testPedal/' + fileName[i] + '.mp3'
            }, {
                'release' : 1,
                'onload' : function(){
                Tone.context.updateInterval = 0;
                Tone.context.lookAhead = 0;
                }
            }).toDestination();
        }

        function onkeydown(e){
            var x = e.keyCode || e.which;
            e.preventDefault();

            if (keyToPitch[e.key] == null) {
                console.log('do nothing');
            } else {
            var index;
            switch (x) {

                // Q - P
                case 81:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,0';
                break;
                case 87:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,1';
                break;
                case 69:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,2';
                break;
                case 82:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,3';
                break;
                case 84:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,4';
                break;
                case 89:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,5';
                break;
                case 85:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,6';
                break;
                case 73:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,7';
                break;
                case 79:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,8';
                break;
                case 80:
                // samplers[0].triggerAttackRelease(keyToPitch[e.key]);
                index = '0,9';
                break;

                // A - L
                case 65:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,0';
                break;
                case 83:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,1';
                break;
                case 68:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,2';
                break;
                case 70:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,3';
                break;
                case 71:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,4';
                break;
                case 72:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,5';
                break;
                case 74:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,6';
                break;
                case 75:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,7';
                break;
                case 76:
                // samplers[1].triggerAttackRelease(keyToPitch[e.key]);
                index = '1,8';
                break;

                // Z - M
                case 90:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,0';
                break;
                case 88:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,1';
                break;
                case 67:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,2';
                break;
                case 86:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,3';
                break;
                case 66:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,4';
                break;
                case 78:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,5';
                break;
                case 77:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '2,6';
                break;
                // case 188:
                //   index = '2,7';
                //   break;

                // SPACE
                case 32:
                // samplers[2].triggerAttackRelease(keyToPitch[e.key]);
                index = '3,0';
                break;
            }
            samplers[index[0]].triggerAttackRelease(keyToPitch[e.key]);
        }
 
        }

        function onkeyup(e){
        samplers.triggerRelease(keyToPitch[e.key]);
        }

        $(document).keydown(function(e) {
            onkeydown(e);
        });

    });

    </script>
</body>
</html>