<script>
    var thepedal = <%- JSON.stringify(pedal) %> ;
    var isMobile = <%- JSON.stringify(mobile) %> ;
    var onomato = thepedal[0].onomato.toUpperCase().replace(/\s+/g, '');
    var tempo = 60000 / thepedal[0].tempo;
    var disableKeys = false;
    var globalR, globalG, globalB;
    var colNum = 1;
    var rSw = true, gSw = true, bSw = true;
    var bgCol;
    var marginTop = isMobile ? 0 : 51; 
    
    class Particle {
      constructor(r, g, b){
        this.x = random(0, width);
        this.y = random(0, height);
        this.r = r;
        this.g = g;
        this.b = b;
        this.d = 2;
        this.xSpeed = random( -(map(tempo, 2000, 250, 1, 4)), (map(tempo, 2000, 250, 1, 4)));
        this.ySpeed = random( -(map(tempo, 2000, 250, 1, 4)), (map(tempo, 2000, 250, 1, 4)));
      }
      createParticle() {
        noStroke();
        noFill();
        circle(this.x,this.y,this.d);
      }
      moveParticle() {
        if(this.x < 0 || this.x > width)
          this.xSpeed*=-1;
        if(this.y < 0 || this.y > height)
          this.ySpeed*=-1;
        this.x+=this.xSpeed;
        this.y+=this.ySpeed;
      }
      joinParticles(particles) {
        particles.forEach(element =>{
          let dis = dist(this.x,this.y,element.x,element.y);
          if(dis<150) {
            strokeWeight(1);
            stroke('rgb(' + this.r + ',' + this.g + ',' + this.b + ')');
            line(this.x,this.y,element.x,element.y);
          }
        });
      }
    }
    class WideBar {
      constructor(y,r,b,g) {
        this.x = 0;
        this.y = y;
        this.w = width;
        this.h = height/4;
        this.r = r;
        this.g = g;
        this.b = b;
        this.speed =  tempo/5 ;
      }
      createWideBar() {
        noStroke();
        fill(this.r, this.g, this.b);
        rect(this.x, this.y, this.w, this.h);
      }
      goDown(arrayName) {
        this.y+=this.speed;
        if(this.y > height) arrayName.splice(0, 1);
      }
      goUp(arrayName) {
        this.y-=this.speed;
        if(this.y < 0) arrayName.splice(0, 1);
      }
    }
    
    class OnoLetter {
      constructor(r, g, b) {
        this.x = random(0, width);
        this.y = random(0, height);
        this.r = r;
        this.g = g;
        this.b = b;
        this.ol = onomato[floor(random(0, onomato.length -1))];
        this.size = width < 800 ? random(width/2, width) : random(400, 800);
      }
      createOnoLetter() {
        noStroke();
        fill(this.r, this.g, this.b);
        textSize(this.size);
        textAlign(CENTER);
        text(this.ol, this.x, this.y);
      }
      deleteOnoLetter(arrayName) {
        arrayName.splice(0, 1);
      }
    }
    
    class LineCircle {
      constructor(r, g, b, fill) {
        this.x = random(0, width);
        this.y = random(0, height);
        this.d = width < 800 ? random(width/2, width/1.5) : random(400, 600);
        this.r = r;
        this.g = g;
        this.b = b;
        this.fill = fill;
        this.speed = 50;
        this.stroke = random(4,10);
      }
      createCircle() {
        stroke(this.r, this.g, this.b);
        strokeWeight(this.stroke);
        if(this.fill) {fill(this.r, this.g, this.b);}
        else {noFill();}
        ellipseMode(CENTER);
        circle(this.x, this.y, this.d);
      }
      shrinkCircle(arrayName) {
        this.d -= this.speed;
        if(this.d < 0) arrayName.splice(0, 1);
      }
    }
    
    let particles = [];
    let wideBars = [];
    let onoLetters = [];
    let lineCircles = [];
    
    function setup() {
      createCanvas(windowWidth, windowHeight - marginTop);
      background(10);
      frameRate(24);
      globalR = floor(random(colorValue[3], colorValue[0]));
      globalG = floor(random(colorValue[4], colorValue[1]));
      globalB = floor(random(colorValue[5], colorValue[2]));

      for(let i = 0;i<width/20;i++){
        particles.push(new Particle(globalR, globalG, globalB));
      }
      bgCol = color( colorValue[6], colorValue[7], colorValue[8], 10);

       if(isMobile) {
        let pads = selectAll('.pad');
       }
    }

    
    function draw() {

      background(bgCol);

      for(let i = 0;i<particles.length;i++) {
        particles[i].createParticle();
        particles[i].moveParticle();
        particles[i].joinParticles(particles.slice(i));
      }
      for(let i = 0;i<wideBars.length;i++) {
        wideBars[i].createWideBar();
        wideBars[i].goDown(wideBars);
      }
      for(let i = 0;i<onoLetters.length;i++) {
        onoLetters[i].createOnoLetter();
        onoLetters[i].deleteOnoLetter(onoLetters);
      }
      for(let i = 0;i<lineCircles.length;i++) {
        lineCircles[i].createCircle();
        lineCircles[i].shrinkCircle(lineCircles);
      }
    
      if (globalR >= colorValue[0]) {rSw = false;}
      if (globalR <= colorValue[3]) {rSw = true;}
      if (globalG >= colorValue[1]) {gSw = false;}
      if (globalG <= colorValue[4]) {gSw = true;}
      if (globalB >= colorValue[2]) {bSw = false;}
      if (globalB <= colorValue[5]) {bSw = true;}
    
        if (rSw){globalR = globalR + colNum;
        } else {globalR = globalR - colNum;}
        if (gSw){globalG = globalG + colNum;
        } else {globalG = globalG - colNum;}
        if (bSw){globalB = globalB + colNum;
        } else {globalB = globalB - colNum;}
    }
    
    function keyPressed() {
      if (keyCode == 65 || keyCode == 66 || keyCode == 49) { // a + b + 1
        globalR = floor(random(colorValue[3], colorValue[0]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
      }
      if (keyCode == 68 || keyCode == 76 || keyCode == 56) { // d + l + 8
        globalG = floor(random(colorValue[4], colorValue[1]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
      }
      if (keyCode == 71 || keyCode == 73 || keyCode == 51) { // g + i + 3
        globalB =  floor(random(colorValue[5], colorValue[2]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
        }
      if (keyCode == 74 || keyCode == 81 || keyCode == 52) { // j + q + 4
        for(var i=0;i<10;i++) {
          particles.push(new Particle(colorValue[6], colorValue[7], colorValue[8]));
        }
        }
      if (keyCode == 77 || keyCode == 69 || keyCode == 53) { // m + e + 5
        for(var i=0;i<10;i++) {
          particles.push(new Particle(190, 180, 180));
        }
      }
      if (keyCode == 80 || keyCode == 82 || keyCode == 90) { // p + r + z
        var r = 10, g = 10, b = 10;
        onoLetters.push(new OnoLetter(r, g, b));
      }
      if (keyCode == 83 || keyCode == 85 || keyCode == 84) { // s + u + t
        onoLetters.push(new OnoLetter(globalR, globalG, globalB));
      }
      if (keyCode == 86 || keyCode == 87 || keyCode == 75) { // v + w + k
        var r = 10, g = 10, b = 10;
        lineCircles.push(new LineCircle(r, g, b, false));
      }
      if (keyCode == 88 || keyCode == 89 || keyCode == 78) { // x + y + n
        var r = 10, g = 10, b = 10;
        lineCircles.push(new LineCircle(r, g, b, true));
      }
      if (keyCode == 67 || keyCode == 72 || keyCode == 48) { // c + h + 0
        lineCircles.push(new LineCircle(globalR, globalG, globalB, true));
      }
      if (keyCode == 70 || keyCode == 79 || keyCode == 55) { // f + o + 7
        lineCircles.push(new LineCircle(globalR, globalG, globalB, false));
      }
      if (keyCode == 50 || keyCode == 57 || keyCode == 54) { // 2 + 9 + 6
        onoLetters.push(new OnoLetter(globalR, globalG, globalB));
      }
      if (keyCode === 32) { // space
        wideBars.push(new WideBar(0,10,10,10));
      }
    
      if(particles.length > 80) {
        var extraParticles = particles.length + 1 - 80;
        particles.splice(0, extraParticles);
      }
    }
    function windowResized() {
      resizeCanvas(windowWidth, windowHeight - marginTop);
    }

    if(isMobile) {
      function touchStarted() {
      let posx = floor(mouseX);
      let posy = floor(mouseY);
      let col0 = posx >= 0 && posx < width/4;
      let col1 = posx >= width/4 && posx < width/4*2;
      let col2 = posx >= width/4*2 && posx < width/4*3;
      let col3 = posx >= width/4*3 && posx <= width;
      let theheight = innerHeight - 80;
      let row0 = posy >= 0 && posy < theheight/10;
      let row1 = posy >= theheight/10 && posy < theheight/10*2;
      let row2 = posy >= theheight/10*2 && posy < theheight/10*3;
      let row3 = posy >= theheight/10*3 && posy < theheight/10*4;
      let row4 = posy >= theheight/10*4 && posy < theheight/10*5;
      let row5 = posy >= theheight/10*5 && posy < theheight/10*6;
      let row6 = posy >= theheight/10*6 && posy < theheight/10*7;
      let row7 = posy >= theheight/10*7 && posy < theheight/10*8;
      let row8 = posy >= theheight/10*8 && posy < theheight/10*9;
      let row9 = posy >= theheight/10*9 && posy < theheight;
    
      if ((col2 && row9)  || (col3 && row1) || (col0 && row9)) {
        globalR = floor(random(colorValue[3], colorValue[0]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
      }
      if ((col2 && row7) || (col2 && row1) || (col0 && row2)) {
        globalG = floor(random(colorValue[4], colorValue[1]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
      }
      if ((col2 && row5) || (col1 && row2 || (col0 && row7))) {
        globalB =  floor(random(colorValue[5], colorValue[2]));
        for(var i=0;i<10;i++) {
          particles.push(new Particle(globalR, globalG, globalB));
        }
      }
      if ((col2 && row3) || (col1 && row9) || (col0 && row6)) {
        for(var i=0;i<10;i++) {
          particles.push(new Particle(colorValue[6], colorValue[7], colorValue[8]));
        }
        }
      if ((col2 && row0) || (col1 && row7) || (col0 && row5)) {
        for(var i=0;i<10;i++) {
          particles.push(new Particle(190, 180, 180));
        }
      }
      if ((col1 && row0) || (col1 && row6) || (col3 && row9)) {
        var r = 10, g = 10, b = 10;
        onoLetters.push(new OnoLetter(r, g, b));
      }
      if ((col2 && row8) || (col1 && row3) || (col1 && row5)) {
        onoLetters.push(new OnoLetter(globalR, globalG, globalB));
      }
      if ((col3 && row2) || (col1 && row8) || (col2 && row2)) {
        var r = 10, g = 10, b = 10;
        lineCircles.push(new LineCircle(r, g, b, false));
      }
      if ((col3 && row8) || (col1 && row4) || (col3 && row0)) {
        var r = 10, g = 10, b = 10;
        lineCircles.push(new LineCircle(r, g, b, true));
      }
      if ((col3 && row7) || (col2 && row4) || (col0 && row0)) {
        lineCircles.push(new LineCircle(globalR, globalG, globalB, true));
      }
      if ((col2 && row6) || (col1 && row1) || (col0 && row3)) {
        lineCircles.push(new LineCircle(globalR, globalG, globalB, false));
      }
      if ((col0 && row8) || (col0 && row1) || (col0 && row4)) {
        onoLetters.push(new OnoLetter(globalR, globalG, globalB));
      }
      if (col3 && row3 || col3 && row4 || col3 && row5 || col3 && row6) {
        wideBars.push(new WideBar(0,10,10,10));
      }
    
      if(width < 450) {
        if(particles.length > 20) {
        var extraParticles = particles.length + 1 - 20;
        particles.splice(0, extraParticles);
        }
      } else if(width < 800) {
        if(particles.length > 40) {
        var extraParticles = particles.length + 1 - 40;
        particles.splice(0, extraParticles);
        }
      } else {
        if(particles.length > 80) {
        var extraParticles = particles.length + 1 - 80;
        particles.splice(0, extraParticles);
      }
      }
    }
    }

      </script>