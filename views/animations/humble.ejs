<script>
    var thepedal = <%- JSON.stringify(pedal) %> ;
    var onomato = thepedal.onomato.toUpperCase().replace(/\s+/g, '');
    var remSpace = onomato.replace(' ', '');
    let textCheck = /^[a-zA-Z]+$/.test(remSpace);

    var thenav = <%- JSON.stringify(nav) %> ;
    var isMobile = <%- JSON.stringify(mobile) %> ;

    var tempo = 60000 / thepedal.tempo;
    var disableKeys = false;
    var marginTop = isMobile ? 0 : 51; 

    let cols, rows, bgCol, elemCol, sideMargin, verMargin;
    let centers = [], rects = [], tiles = [], letters = [];
    let gridSize = 80;
    let maxR = colorValue[0]; let minR = colorValue[3];
    let maxG = colorValue[1]; let minG = colorValue[4];
    let maxB = colorValue[2]; let minB = colorValue[5];

    let action = [];
    for (var a = 0; a < 5; a++) {
        action[a] = 0;
    }
    let lMode = 0;

    function preload() {
        if(thenav == 'v2') {
            myFont = loadFont('../css/fonts/PressStart.otf');
        } else {
            myFont = loadFont('css/fonts/PressStart.otf');
        }
    }

    function setup() {
    createCanvas(innerWidth, innerHeight - marginTop);
      if(textCheck) {textFont(myFont);}
      else {textStyle(BOLD);}
      
        bgCol = color(colorValue[9]);
        elemCol = color(colorValue[6], colorValue[7], colorValue[8]);

    cols = int( width / gridSize );
    rows = int( height / gridSize );
    sideMargin = (innerWidth - (cols * gridSize)) /2;
    verMargin = (innerHeight - (rows * gridSize)) /2;
    
    translate(gridSize/2, gridSize/2);  
    for (let v = 0; v < cols; v++) {
        centers[v] = [];
        rects[v] = [];
        tiles[v] = [];
        for (let r = 0; r < rows; r++) {
        let mid = createVector( 0, 0);
        let offset = createVector((gridSize * v), (gridSize * r));
        mid.add(offset);
        point(mid.x, mid.y);
        centers[v][r] = mid;
        }
    }
    
    for (let v = 0; v < cols; v++) {
        for (let r = 0; r < rows; r++) {
        let recta = new Recta(centers[v][r].x, centers[v][r].y);
        rects[v][r] = recta;
        let tile = new Tile(centers[v][r].x, centers[v][r].y);
        tiles[v][r] = tile;
        tiles[v][r].hide(v, r, tiles);
        }
    }
    
    setInterval( changeHides, tempo * 4);
    setInterval( changeMode, tempo * 8);

    if(isMobile) {
        let pads = selectAll('.pad');
    }
    }

    function draw() {
        if (action[0] == 3) action[0] = 0;
        if (action[1] == 3) action[1] = 0;
        if (action[2] == 3) action[2] = 0;
        if (action[3] == 3) action[3] = 0;
        if (action[4] == 3) action[4] = 0;
        if (lMode == 3) lMode = 0;

    background(bgCol);

    noFill();
    angleMode(DEGREES);

    translate(sideMargin, verMargin); 
    
    for (let v = 0; v < cols; v++) {
        for (let r = 0; r < rows; r++) {   
        rects[v][r].show(v, r);
        rects[v][r].action1();
        rects[v][r].action2();
        rects[v][r].action3();
        rects[v][r].action4();
        rects[v][r].action5();
        tiles[v][r].show(v, r);
        }
    }
    for (let l = 0; l < letters.length; l++) {   
        letters[l].show();
        letters[l].move();
        letters[l].remove(letters);
    }
    }
        
    function changeHides() {
        for (let v = 0; v < cols; v++) {
        for (let r = 0; r < rows; r++) {   
        tiles[v][r].hide(v, r, tiles);
        }
        }
    }

    function changeMode() {
        if(lMode == 0 || lMode == 1) {
            bgCol = color(colorValue[6], colorValue[7], colorValue[8]);
            elemCol = color(colorValue[9]);
        } else {
            bgCol = color(colorValue[9]);
            elemCol = color(colorValue[6], colorValue[7], colorValue[8]);
        }
            lMode = lMode + 1;
            changeHides();
    }

    function keyPressed() {
      if (keyCode == 65 || keyCode == 66 || keyCode == 49) { // a + b + 1
        action[0] = action[0] + 1;
      }
      if (keyCode == 68 || keyCode == 76 || keyCode == 56) { // d + l + 8
        action[1] = action[1] + 1;
      }
      if (keyCode == 71 || keyCode == 73 || keyCode == 51) { // g + i + 3
        action[2] = action[2] + 1;
      }
      if (keyCode == 74 || keyCode == 81 || keyCode == 52) { // j + q + 4
        action[3] = action[3] + 1;
      }
      if (keyCode == 77 || keyCode == 69 || keyCode == 53) { // m + e + 5
        action[4] = action[4] + 1;
      }
      if (keyCode == 80 || keyCode == 82 || keyCode == 90) { // p + r + z
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[0] = action[0] + 1;
      }
      if (keyCode == 83 || keyCode == 85 || keyCode == 84) { // s + u + t
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[1] = action[1] + 1;
      }
      if (keyCode == 86 || keyCode == 87 || keyCode == 75) { // v + w + k
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[2] = action[2] + 1;
      }
      if (keyCode == 88 || keyCode == 89 || keyCode == 78) { // x + y + n
        let OnoLetter = onomato[floor(random(0, onomato.length -1))];
        let letter = new Letter(OnoLetter, 'ono');
        letters.push(letter);
      }
      if (keyCode == 67 || keyCode == 72 || keyCode == 48) { // c + h + 0
        let OnoLetter = onomato[floor(random(0, onomato.length -1))];
        let letter = new Letter(OnoLetter, 'ono');
        letters.push(letter);
      }
      if (keyCode == 70 || keyCode == 79 || keyCode == 55) { // f + o + 7
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[3] = action[3] + 1;
      }
      if (keyCode == 50 || keyCode == 57 || keyCode == 54) { // 2 + 9 + 6
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[4] = action[4] + 1;
      }
      if (keyCode === 32) { // space
        changeMode();
      }
      return false;
    }
    function windowResized() {
      resizeCanvas(windowWidth, windowHeight - marginTop);
    }

    class Letter {
        constructor(key, type) {
            this.key = key;
            this.type = type;
            this.pos = createVector(gridSize * floor(random(cols)), gridSize * floor(random(rows)));
            if(this.type == 'ono') {
                this.size = gridSize * ( floor(random(4, 6.9)) );
                this.speed = random(0.2, 0.4);
            } else {
                this.size = gridSize * ( floor(random(1, 3)) );
                this.speed = random(0.3, 0.5);
            }
            this.color = color(random(maxR, minR), random(maxG, minG), random(maxB, minB));
            this.dir = random([0, 1]);
            this.vel = createVector(0, 0)
            this.dotPos = -(this.size / 2) + (gridSize * 0.2);
        }
        
        show() {
            fill(this.color);
            rect(this.pos.x, this.pos.y, this.size, this.size);
            fill(bgCol);
            textAlign(CENTER);
            textSize(this.size * 0.6);
            text(this.key, this.pos.x, this.pos.y + (this.size * 0.35));
            rect(this.pos.x + this.dotPos, this.pos.y + this.dotPos, gridSize * 0.2, gridSize * 0.2);
            rect(this.pos.x - this.dotPos, this.pos.y + this.dotPos, gridSize * 0.2, gridSize * 0.2);
            rect(this.pos.x + this.dotPos, this.pos.y - this.dotPos, gridSize * 0.2, gridSize * 0.2);
            rect(this.pos.x - this.dotPos, this.pos.y - this.dotPos, gridSize * 0.2, gridSize * 0.2);
        }
        
        move() {
            this.pos.add(this.vel);
            if(this.dir == 0) {
            if(this.pos.y > height /2) {
                this.speed * -1;
            } 
            let moveVer = createVector(0, this.speed);
            this.vel.add(moveVer);
            } else if (this.dir == 1) {
            if(this.pos.x > width /2) {
                this.speed * -1;
            }
            let moveHor = createVector(this.speed, 0);
            this.vel.add(moveHor);
            }
        }
        
        remove(arrayName) {
            if(this.dir == 0) {
            if(this.pos.y > height || this.pos.y < -(this.size) ) {
                for (let l = 0; l < arrayName.length; l++) {
                if (arrayName[l].pos.y == this.pos.y) {
                    arrayName.splice(l, 1);
                    break;
                }
                }
            }
            } else if (this.dir == 1) {
            if(this.pos.x > width || this.pos.x < -(this.size) ) {
                for (let l = 0; l < arrayName.length; l++) {
                if (arrayName[l].pos.x == this.pos.x) {
                    arrayName.splice(l, 1);
                    break;
                }
                }
            }      
            }
        }
    }
    
    class Recta {
        constructor(x, y) {
            this.pos = createVector( x + gridSize/2 , y + gridSize/2 );
            this.firstSize = gridSize;
            this.secSize =  gridSize * 0.8;
            this.thirSize =  gridSize * 0.6;
            this.fourSize =  gridSize * 0.4;
            this.fifSize =  gridSize * 0.2;
            this.angle1 = 0;
            this.offset1 = 0; // Adjust size for rotation
            this.offset2 = 0;
            this.center = createVector(0, 0); // center for rotating elem
            this.shift = createVector(0, 0);
            this.color = color(random(maxR, minR), random(maxG, minG), random(maxB, minB));
            this.speed = 0.1;
            this.zoomSp = 0.5;
        }
        
        show(v, r) {
            rectMode(CENTER);
            noStroke();
            let tx = (v * gridSize) + gridSize / 2;
            let ty = (r * gridSize) + gridSize / 2;
            
            fill(this.color);
            let rect0 = rect(this.pos.x, this.pos.y, this.firstSize, this.firstSize);

            fill(bgCol);
            push();
            translate(tx, ty);
            rotate(this.angle1);
            let rect1 = rect(this.center.x + this.shift.x, this.center.y + this.shift.y, this.secSize - this.offset1, this.secSize - this.offset1); 
            pop();
            
            fill(this.color);
            let rect2 = rect(this.pos.x + (this.shift.x *2), this.pos.y + (this.shift.y *2), this.thirSize, this.thirSize);

            fill(elemCol);
            push();
            translate(tx, ty);
            rotate(this.angle1);
            let rect3 = rect(this.center.x + (this.shift.x *3), this.center.y + (this.shift.y *3), this.fourSize, this.fourSize);
            pop();
            
            fill(bgCol);
            let rect4 = rect(this.pos.x + (this.shift.x *4) + this.offset2, this.pos.y + (this.shift.y *4) + this.offset2, this.fifSize, this.fifSize);
        }
        
        action1() {
            if(action[0] == 0 || action[0] == 1) {
                if(this.angle1 == 45) {
                    this.angle1 = 45;
                } else {
                    this.angle1 = this.angle1 + 1;
                }
                if(this.offset1 == 14) {
                    this.offset1 = 14;
                } else {
                    this.offset1 = this.offset1 + 0.5;
                }
            } else {
                if(this.angle1 == 0) {
                    this.angle1 = 0;
                } else {
                this.angle1 = this.angle1 - 1;
                }
                if(this.offset1 == 0) {
                    this.offset1 = 0;
                } else {
                    this.offset1 = this.offset1 - 0.5;
                }
            } 
        }
        action2() {
            let moveR = createVector(this.speed, 0);
            let moveL = createVector(-(this.speed), 0);
            if (action[1] == 0 || action[1] == 1) {
            if (this.shift.x >= gridSize * 0.1) {
                this.shift.x = gridSize * 0.1;
            } else { 
                this.shift.add(moveR);
            }
            } else {
            if (this.shift.x <= -(gridSize * 0.1)) {
                this.shift.x = -(gridSize * 0.1);
            } else {
                this.shift.add(moveL);
            }
            }
        }
        
        action3() {
            let moveT = createVector(0, -(this.speed));
            let moveB = createVector(0, this.speed);
            if(action[2] == 0 || action[2] == 1) {
            if(this.shift.y >= gridSize * 0.1) {
                this.shift.y = gridSize * 0.1;
            } else {
                this.shift.add(moveB);
            }
            } else {
            if(this.shift.y <= -(gridSize * 0.1)) {
                this.shift.y = -(gridSize * 0.1);
            } else {
                this.shift.add(moveT);
            }
            }
        }
        
        action4() {
            if(action[3] == 0 || action[3] == 1) {
                if(this.fifSize > this.thirSize) {
                this.fifSize = this.thirSize;
                } else {
                this.fifSize = this.fifSize + this.zoomSp;
                }
            } else {
                if(this.fifSize <= gridSize * 0.2) {
                this.fifSize = gridSize * 0.2;
                } else {
                this.fifSize = this.fifSize - this.zoomSp;
                }
            }
        }
        
        action5() {
            if(action[4] == 0 || action[4] == 1) {
                if(this.firstSize < this.thirSize) {
                this.firstSize = this.thirSize;
                } else {
                this.firstSize = this.firstSize - this.zoomSp;
                }
            } else {
                if(this.firstSize >= gridSize) {
                this.firstSize = gridSize;
                } else {
                this.firstSize = this.firstSize + this.zoomSp;
                }
            }
        }
    }

    class Tile {
        constructor(x, y) {
            this.size = gridSize;
            this.pos = createVector( x + gridSize/2 , y + gridSize/2 );
            this.color = bgCol;
        }
        show() {
            rectMode(CENTER);
            fill(this.color);
            rect(this.pos.x, this.pos.y, this.size, this.size);
        }
        hide() {
            let hide = random([0, 1]);
            if (hide == 0) {
            this.color = color(0, 0, 0, 0);
            } else {
            this.color = bgCol;
            }
        }
    }

    if(isMobile) {
      function touchStarted() {
      let posx = floor(mouseX);
      let posy = floor(mouseY);
      let col0 = posx >= 0 && posx < width/4;
      let col1 = posx >= width/4 && posx < width/4*2;
      let col2 = posx >= width/4*2 && posx < width/4*3;
      let col3 = posx >= width/4*3 && posx <= width;
      let theheight = innerHeight - 80;
      let row0 = posy >= 0 && posy < theheight/10;
      let row1 = posy >= theheight/10 && posy < theheight/10*2;
      let row2 = posy >= theheight/10*2 && posy < theheight/10*3;
      let row3 = posy >= theheight/10*3 && posy < theheight/10*4;
      let row4 = posy >= theheight/10*4 && posy < theheight/10*5;
      let row5 = posy >= theheight/10*5 && posy < theheight/10*6;
      let row6 = posy >= theheight/10*6 && posy < theheight/10*7;
      let row7 = posy >= theheight/10*7 && posy < theheight/10*8;
      let row8 = posy >= theheight/10*8 && posy < theheight/10*9;
      let row9 = posy >= theheight/10*9 && posy < theheight;
    
      if ((col2 && row9)  || (col3 && row1) || (col0 && row9)) {
        action[0] = action[0] + 1;
      }
      if ((col2 && row7) || (col2 && row1) || (col0 && row2)) {
        action[1] = action[1] + 1;
      }
      if ((col2 && row5) || (col1 && row2 || (col0 && row7))) {
        action[2] = action[2] + 1;
      }
      if ((col2 && row3) || (col1 && row9) || (col0 && row6)) {
        action[3] = action[3] + 1;
      }
      if ((col2 && row0) || (col1 && row7) || (col0 && row5)) {
        action[4] = action[4] + 1;
      }
      if ((col1 && row0) || (col1 && row6) || (col3 && row9)) {
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[0] = action[0] + 1;
      }
      if ((col2 && row8) || (col1 && row3) || (col1 && row5)) {
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[1] = action[1] + 1;
      }
      if ((col3 && row2) || (col1 && row8) || (col2 && row2)) {
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[2] = action[2] + 1;
      }
      if ((col3 && row8) || (col1 && row4) || (col3 && row0)) {
        let OnoLetter = onomato[floor(random(0, onomato.length -1))];
        let letter = new Letter(OnoLetter, 'ono');
        letters.push(letter);
      }
      if ((col3 && row7) || (col2 && row4) || (col0 && row0)) {
        let OnoLetter = onomato[floor(random(0, onomato.length -1))];
        let letter = new Letter(OnoLetter, 'ono');
        letters.push(letter);
      }
      if ((col2 && row6) || (col1 && row1) || (col0 && row3)) {
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[3] = action[3] + 1;
      }
      if ((col0 && row8) || (col0 && row1) || (col0 && row4)) {
        let letter = new Letter('', 'random');
        letters.push(letter);
        action[4] = action[4] + 1;
      }
      if (col3 && row3 || col3 && row4 || col3 && row5 || col3 && row6) {
        changeMode();
      }
    }
    }
      </script>