<html>
<head>
    <!DOCTYPE html>
    <html>
    <head>
        <title id="pedalPageTitle">OnomatoPedal | <%= pedal[0].onomoname %></title>    
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" type="text/css" href="../css/v1style.css" />
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script type="text/javascript" src="../js/paper-full_0.12.3.js"></script>
        <script type="text/javascript" src="../js/slick.min.js"></script>
        <script type="text/javascript" src="../js/howler.js"></script>
        <script src="../js/ejs.js"></script>

        <script> /// Paper.js animation
            var pedal = <%- JSON.stringify(pedal[0]) %> ;
            var pedalNumber = pedal.id; 
            var paperD = <%- JSON.stringify(paper[0]) %> ;

                // Coloring Mobile Drumpads
                $('#keyQ').css("background-color", paperD.keyColorQ);
                $('#keyW').css("background-color", paperD.keyColorW);
                $('#keyE').css("background-color", paperD.keyColorE);
                $('#keyR').css("background-color", paperD.keyColorR);
                $('#keyA').css("background-color", paperD.keyColorA);
                $('#keyS').css("background-color", paperD.keyColorS);
                $('#keyD').css("background-color", paperD.keyColorD);
                $('#keyF').css("background-color", paperD.keyColorF);
                $('#keyZ').css("background-color", paperD.keyColorZ);
                $('#keyX').css("background-color", paperD.keyColorX);
                $('#keyC').css("background-color", paperD.keyColorC);
                $('#keyV').css("background-color", paperD.keyColorV);
    
                // Paper.js setup
                paper.install(window);
                    $(document).ready( function() {
                        paper.setup('myCanvas');
                        
                // Paper + Howler
                var keyData = {
                            q: {sound: new Howl({ src: paperD.sampleQ}),
                                color: paperD.keyColorQ},
                            w: {sound: new Howl({ src: paperD.sampleW}),
                                color: paperD.keyColorW},
                            e: {sound: new Howl({ src: paperD.sampleE}),
                                color: paperD.keyColorE},
                            r: {sound: new Howl({ src: paperD.sampleR}),
                                color: paperD.keyColorR},
                            a: {sound: new Howl({ src: paperD.sampleA}),
                                color: paperD.keyColorA},
                            s: {sound: new Howl({ src: paperD.sampleS}),
                                color: paperD.keyColorS},
                            d: {sound: new Howl({ src: paperD.sampleD}),
                                color: paperD.keyColorD},
                            f: {sound: new Howl({ src: paperD.sampleF}),
                                color: paperD.keyColorF},
                            z: {sound: new Howl({ src: paperD.sampleZ}),
                                color: paperD.keyColorZ},
                            x: {sound: new Howl({ src: paperD.sampleX}),
                                color: paperD.keyColorX},
                            c: {sound: new Howl({ src: paperD.sampleC}),
                                color: paperD.keyColorC},
                            v: {sound: new Howl({ src: paperD.sampleV}),
                                color: paperD.keyColorV}               
                            };
    
            // Draw objects with Paper.js
                        var lineCircles = [];
                        var circles = [];
                        var thinLine = [];
                        var onoSvg = [];
                        var waveBlock = [];
                        var point, path;
                        var canvasWidth = window.innerWidth;
                        var canvasHeight = window.innerHeight;
                function squareClickEvent(key) {
                    var randomPointWidth = canvasWidth * Math.random();
                    var randomPointHeight = canvasHeight * Math.random();
                    var randomePoint = new paper.Point(randomPointWidth, randomPointHeight);
                        if (key == 'q' || key == 'd') {
                            if (pedalNumber == 22) {
                                var onomatoSvg = new Path(paperD.onoSvgPathThree);
                                onomatoSvg.strokeColor = keyData[key].color;
                                onomatoSvg.strokeWidth = 6;
                                onomatoSvg.position = randomePoint;
                                keyData[key].sound.play();
                                lineCircles.push(onomatoSvg);
                            } else {
                            var newCircle = new paper.Path.Circle(randomePoint, 4);
                            newCircle.strokeColor = keyData[key].color;
                            newCircle.strokeWidth = 6;
                            keyData[key].sound.play();
                            lineCircles.push(newCircle);
                            }
                        } else if (key == 'a' || key == 'v') {
                            var newCircle = new paper.Path.Circle(randomePoint, 500);
                            newCircle.fillColor = keyData[key].color;
                            keyData[key].sound.play();
                            circles.push(newCircle);
                        } else if (key == 'f' || key == 'x') {
                            var topLeftPoint = new paper.Point(0, 0);
                            var topRightPoint = new paper.Point(canvasWidth, 100)
                            var newRectangle = new paper.Path.Rectangle(topLeftPoint, topRightPoint);
                            newRectangle.fillColor = keyData[key].color;
                            keyData[key].sound.play();
                            thinLine.push(newRectangle);
                        } else if (key == 'r' || key == 's') {
                            var onomatoSvg = new Path(paperD.onoSvgPathOne);
                            onomatoSvg.strokeColor = keyData[key].color;
                            onomatoSvg.strokeWidth = 6;
                            onomatoSvg.position = randomePoint;
                            keyData[key].sound.play();
                            onoSvg.push(onomatoSvg);
                        } else if (key == 'w' || key == 'c') {
                            var onomatoSvg = new Path(paperD.onoSvgPathTwo);
                            onomatoSvg.strokeColor = keyData[key].color;
                            onomatoSvg.strokeWidth = 6;
                            onomatoSvg.position = randomePoint;
                            keyData[key].sound.play();
                            lineCircles.push(onomatoSvg);
                        } else if (key == 'e' || key == 'z') {
                            var width, height, center;
                            var points = 12;
                            var smooth = true;
                            var path = new Path();
                            var center = new paper.Point(canvasWidth / 2, canvasHeight / 2);
                            var width = canvasWidth;
                            var height = canvasHeight;
                                path.strokeColor = keyData[key].color;
                                path.strokeWidth = 4;
                                path.position.y = center.y;
                                path.segments = [];
                                path.add(0, center.y);
                                for (var i = 1; i < points; i++) {
                                    var point = new paper.Point(width / points * i, height * Math.random());
                                    path.add(point);
                                }
                                path.add(canvasWidth , center.y);
                                path.smooth({ type: 'continuous' });
                            keyData[key].sound.play();
                            waveBlock.push(path);
                            }
                        };
                function keyDownEvent(key) {
                    var key = (event.key);
                    var randomPointWidth = canvasWidth * Math.random();
                    var randomPointHeight = canvasHeight * Math.random();
                    var randomePoint = new paper.Point(randomPointWidth, randomPointHeight);
                        if (key == 'q' || key == 'd') {
                            if (pedalNumber == 22) {
                                var onomatoSvg = new Path(paperD.onoSvgPathThree);
                                onomatoSvg.strokeColor = keyData[key].color;
                                onomatoSvg.strokeWidth = 6;
                                onomatoSvg.position = randomePoint;
                                keyData[key].sound.play();
                                lineCircles.push(onomatoSvg);
                            } else {
                            var newCircle = new paper.Path.Circle(randomePoint, 4);
                            newCircle.strokeColor = keyData[key].color;
                            newCircle.strokeWidth = 6;
                            keyData[key].sound.play();
                            lineCircles.push(newCircle);
                            }
                        } else if (key == 'a' || key == 'v') {
                            var newCircle = new paper.Path.Circle(randomePoint, 500);
                            newCircle.fillColor = keyData[key].color;
                            keyData[key].sound.play();
                            circles.push(newCircle);
                        } else if (key == 'f' || key == 'x') {
                            var topLeftPoint = new paper.Point(0, 0);
                            var topRightPoint = new paper.Point(canvasWidth, 100)
                            var newRectangle = new paper.Path.Rectangle(topLeftPoint, topRightPoint);
                            newRectangle.fillColor = keyData[key].color;
                            keyData[key].sound.play();
                            thinLine.push(newRectangle);
                        } else if (key == 'r' || key == 's') {
                            var onomatoSvg = new Path(paperD.onoSvgPathOne);
                            onomatoSvg.strokeColor = keyData[key].color;
                            onomatoSvg.strokeWidth = 6;
                            onomatoSvg.position = randomePoint;
                            keyData[key].sound.play();
                            onoSvg.push(onomatoSvg);
                        } else if (key == 'w' || key == 'c') {
                            var onomatoSvg = new Path(paperD.onoSvgPathTwo);
                            onomatoSvg.strokeColor = keyData[key].color;
                            onomatoSvg.strokeWidth = 6;
                            onomatoSvg.position = randomePoint;
                            keyData[key].sound.play();
                            lineCircles.push(onomatoSvg);
                        } else if (key == 'e' || key == 'z') {
                            var width, height, center;
                            var points = 12;
                            var smooth = true;
                            var path = new Path();
                            var center = new paper.Point(canvasWidth / 2, canvasHeight / 2);
                            var width = canvasWidth;
                            var height = canvasHeight;
                                path.strokeColor = keyData[key].color;
                                path.strokeWidth = 4;
                                path.position.y = center.y;
                                path.segments = [];
                                path.add(0, center.y);
                                for (var i = 1; i < points; i++) {
                                    var point = new paper.Point(width / points * i, height * Math.random());
                                    path.add(point);
                                }
                                path.add(canvasWidth , center.y);
                                path.smooth({ type: 'continuous' });
                            keyData[key].sound.play();
                            waveBlock.push(path);
                        }
                    };
                // Draw when Keys are down
                $(document).keydown(function()  {
                    keyDownEvent();
                });
                // Draw when square drum pads are tapped
                var squareIDs = [	"keyQ", "keyW", "keyE", "keyR", "keyA", "keyS", "keyD", "keyF", "keyZ", "keyX", "keyC", "keyV"];
                var squareToKey = [	"q", "w", "e", "r", "a", "s", "d", "f", "z", "x", "c", "v"];
                var keyLength = squareToKey.length;
                
                for (i = 0; i < keyLength; i++) {
                    document.getElementById(squareIDs[i]).onclick =  
                    squareClickEvent.bind(this, squareToKey[i]);
                }
                // Animation for each object
                view.onFrame = function(event) {
                                for (var x = 0; x < lineCircles.length; x++) {
                                    lineCircles[x].strokeColor.hue += 1;
                                    lineCircles[x].scale(1.2);
                                    lineCircles[x].opacity -= 0.02;
                                    if (lineCircles[x].opacity < 0.1) {
                                        lineCircles[x].remove();
                                        lineCircles.splice(x, 1);
                                    }}
                                for (var x = 0; x < circles.length; x++) {
                                    circles[x].fillColor.hue += 1;
                                    circles[x].scale(0.9);
                                    if (circles[x].area < 1) {
                                        circles[x].remove();
                                        circles.splice(x, 1);
                                    }}
                                for (var x = 0; x < thinLine.length; x++) {
                                    thinLine[x].position.y += 30;
                                    thinLine[x].fillColor.hue -= 5;
                                    if (thinLine[x].position.y >= canvasHeight) {
                                        thinLine[x].remove();
                                        thinLine.splice(x, 1);
                                    }}
                                for (var x = 0; x < onoSvg.length; x++) {
                                    onoSvg[x].scale(1.1);
                                    onoSvg[x].opacity -= 0.02;
                                    if (onoSvg[x].opacity < 0.1) {
                                        onoSvg[x].remove();
                                        onoSvg.splice(x, 1);
                                    }}
                                for (var x = 0; x < waveBlock.length; x++) {
                                    waveBlock[x].scale(1, 0.9);
                                    waveBlock[x].opacity -= 0.01;
                                    waveBlock[x].strokeColor.hue += 1;
                                    if (waveBlock[x].opacity < 0.1) {
                                        waveBlock[x].remove();
                                        waveBlock.splice(x, 1);
                                    }
                                }
                    };
                });
        </script>
    </head>
    
    <body>
    <!-- Modal -->
        <div id="modalBG">
            <div class="loadingSpinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            <div class="modalContent" id="modalScreen">
                <p id="modalMessage"></p>
                <img src="../images/v1/keysOnBoard.svg">
                <button class="modalButton" id="showStarter">OK</button>
            </div>
            <div class="modalContent" id="modalMobile"></div>
        </div>
    
    <!-- Play mode mobile-->
        <div id="tapKeyWrap">
            <div class="tapKey" id="keyR"></div>
            <div class="tapKey" id="keyF"></div>
            <div class="tapKey" id="keyV"></div>
            <div class="tapKey" id="keyQ"></div>
            <div class="tapKey" id="keyW"></div>
            <div class="tapKey" id="keyE"></div>
            <div class="tapKey" id="keyA"></div>
            <div class="tapKey" id="keyS"></div>
            <div class="tapKey" id="keyD"></div>
            <div class="tapKey" id="keyZ"></div>
            <div class="tapKey" id="keyX"></div>
            <div class="tapKey" id="keyC"></div>
        </div>
        
    <!-- ****** Body ****** -->
        <div class="wrap pedalPageWrap">

            <%- include('./partials/v1header.ejs')  %> 
            
            <div class="title-pedal" id="OnomoPedalHeader"  style="background-color: <%= pedal[0].hex %>;">
                <img src='../images/v1/pedalHeader-ono.svg'>
                <%= pedal[0].onohiragana %> + 
                <img src='../images/v1/pedalHeader-pedal.svg'>
                <%= pedal[0].name %>
            </div>
            <div id="playModeHeader">
                <div class="pedal-small"> 
                    <img id="pedalSmall" src="../images/pedals/<%= pedal[0].nameid %>.png">
                </div>
                <div class="title-PlayMode" style="color: <%= pedal[0].hex %>;">
                    <%= pedal[0].onohiragana %> + <%= pedal[0].name %>
                </div>
                <div class='clear'></div>
            </div>
                
            <!-- Pedal -->
            <div id="pedal">
                <img id="thePedal" src="../images/pedals/<%= pedal[0].nameid %>.png">
    
                <!-- Circular Action Buttons -->
                <ul id="actions">
                    <li class='actionBtn playAudio' id="listenBeat">
                        <img src="../images/v1/playBeat.svg">
                        <span>Play Track</span>
                    </li>
                    <li class='actionBtnMobile playAudio' id="playMode">
                        <img src="../images/v1/playBeat.svg">
                        <span>Play Mode</span>
                    </li>
                    <li class='actionBtn' id="download" >
                        <img src="../images/v1/downloadSample.svg">
                        <span>Download Samples</span>
                    </li>
                    <a id="aboutPedalBtn" href="<%= pedal[0].eqdurl %>" target="_blank">
                        <li class='actionBtn' id="aboutPedal">
                        <% if (pedal[0].id == 21) {%>
                            <img src="../images/v1/aboutBunnies.svg"><span>Check Out Bunnies</span>
                        <%} else {%>
                            <img src="../images/v1/seePedal.svg"><span>Check Out Pedal</span>
                        <%}%>
                        </li>
                    </a>
                    <li class='actionBtn' id='fullscreenMode'>
                        <img src="../images/v1/fullscreen.svg">
                        <span>Full Browser Mode</span>
                    </li>
                </ul>
    
                <!-- Onomonapia Description-->
                <h3 id="onomoName" style="color: <%= pedal[0].hex %>;">
                    <img src='../images/v1/onoName.svg'>
                    <%= pedal[0].onomoname %>
                    <img class='playPronBtn' src='../images/v1/speaker.svg'>
                </h3>
                <p id="onomoInfo"><%- pedal[0].onomoDesc %></p>
                <h3 id="trackName" style="color: <%= pedal[0].hex %>;">
                    <img src='../images/v1/trackName.svg'>
                    <%- pedal[0].trackname %>
                </h3>
                <p id="trackInfo"><%- pedal[0].trackinfo %></p>
                <h3 id="pedalName" style="color: <%= pedal[0].hex %>;">
                    <% if (pedal[0].id == 21) {%>
                        <img src='../images/v1/bunnyName.svg'>
                    <%} else {%>
                        <img src='../images/v1/pedalName.svg'>
                    <%}%>
                    <%= pedal[0].name %>
                </h3>
                <p id="pedalInfo"><%= pedal[0].pedalinfo %></p>
            </div>
            
            <!-- More Pedals -->
            <div class="morePedalsContainer">
                <div id="morePedals">
                    <div id="pedalShelf">
                        <%  function shuffle(arra1) { var ctr = arra1.length, temp, index; while (ctr > 0) { index = Math.floor(Math.random() * ctr); ctr--; temp = arra1[ctr]; arra1[ctr] = arra1[index]; arra1[index] = temp; } return arra1; } %>
                        <% shuffle(allPedals); %>
                        <% for (let p = 0; p < allPedals.length; p++) {%>
                            <% if (allPedals[p].id ==21) {} else {%>
                            <a href="./<%=allPedals[p].onomoid%>">
                            <img class="morePedal" data-pedal-id="<%=allPedals[p].id%>" src="../images/opv1-cover/<%=allPedals[p].onomoid%>.png" alt="<%=allPedals[p].onomoid%>" />
                            </a>
                        <%}}%>
                    </div>
                </div>
                <div id="pedalAccordionButton" class="openAccordion" onclick="openCloseAccordion()" >
                    SEE MORE PEDALS
                </div>
            </div>
        
            <!-- 'Show-all' button in full browser mode-->
            <div id="playModeIcons">
                <div id="showAll" class="actionBtn"><img src="../images/v1/showAll.svg"><span>Back to Pedal</span></div>
                <div id="pauseMobile" class="actionBtn"><img src="../images/v1/pauseBeat.svg"><span>Pause</span></div>
                <div id="mobileLogo"><img src="../images/v1/EQD-PB_logo@2x.png"></div>
            </div>
    
            <!-- BG Canvas for Paper.js -->
            <canvas id="myCanvas" resize></canvas>
        </div>
    
        <!-- <div class="footerContainer"> -->
            <%- include('./partials/v1footer.ejs')  %> 
        <!-- </div> -->
    
        <script> //// Action buttons
            if(( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2))
            {
                $('#pedalAccordionButton').css({
                    'background-color': pedal.hex
                });
            } else {
            $('#pedalAccordionButton').on('mouseenter',function () {
                $(this).css({
                'background-color': pedal.hex,
                'transition-duration':'300ms'
                });
            });
            $('#pedalAccordionButton').on('mouseleave',function() {
                $(this).css({
                'background-color': '#838080'
                });
            });
            }

            $('#download').click(function(e) {
                e.preventDefault();
                window.location.href = pedal.sampleurl;
            });

            if (($(window).width() < 960) | ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) {
            } else {
                $('.actionBtn').on('mouseenter',function () { 
                $(this).css({ 
                    'width': '220px',
                    'background': pedal.hex,
                    'transition-duration':'50ms'
                });
                $('span', this).css({
                    'display':'inline'
                });
                $('#actions').css({
                    'width': '450px',
                    'transition-duration': '50ms'
                });
                });
                $('.actionBtn').on('mouseleave',function() {
                $('span', this).css('display','none'),
                $(this).css({
                    'width': '50px',
                    'background': '#ffffff',
                    'transition-duration':'100ms'
                });
                $('#actions').css({
                    'width': '280px',
                    'transition-duration': '100ms'
                });
                });
                }
        </script>
        <script> //// Action functions

        function playBeat(params) {
            var audioElement = document.createElement('audio');
            audioElement.setAttribute('src', pedal.beaturl);
            
            audioElement.addEventListener('ended', function() {
                this.play();
            }, false);

            if (audioElement.play == true) {
                $(".playAudio > img, #pauseMobile > img").attr('src', "../images/v1/pauseBeat.svg");
                $(".playAudio > span, #pauseMobile > span").html("Pause");
            } else {
                $(".playAudio > img, #pauseMobile > img").attr('src', "../images/v1/playBeat.svg");
                if (($(window).width() < 960) | ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) {
                } else {
                $("#pauseMobile > span, #pauseMobile > span").html("Play Track");
                }
            }
            
            $('.playAudio, #pauseMobile').click(function() {
            if (audioElement.paused == false) {
                audioElement.pause();
                $(".playAudio > img, #pauseMobile > img").attr('src', "../images/v1/playBeat.svg");
                $(".playAudio > span, #pauseMobile > span").html("Play Track");
            } else {
                audioElement.play();
                $(".playAudio > img, #pauseMobile > img").attr('src', "../images/v1/pauseBeat.svg");
                $(".playAudio > span, #pauseMobile > span").html("Pause");
            }
            });

            if (($(window).width() < 960) || ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) {
            $('#showAll').click(function() {
            audioElement.pause();
            $(".playAudio > img").attr('src', "../images/v1/playBeat.svg");
            $(".playAudio > span").html("Play Mode");
            });
            }
        };
        
        $(document).ready(function() {
        playBeat();
        });

        // ===== Play Onomato Pronouciation =====

        function playPron(params) {
        var pronAudio = document.createElement('audio');
        pronAudio.setAttribute('src', `../sound/v1/pron/pron_${pedal.onomoid}.mp3`);
        pronAudio.play();
        };
        $('.playPronBtn').click(function (){
        playPron();
        });

          // ===== Change hex on Mobile view =====

        if ($(window).width() < 960) {
        $('#playMode, #aboutPedal').css({
            'background': pedal.hex
        });     
        } else {
        }
        $(window).on('resize', function() {
        if ($(window).width() < 960) {
            $('#listenBeat, #aboutPedal').css({
            'background': pedal.hex
            });
        }
        });
        $(window).on('resize', function() {
        if (($(window).width() < 960) | ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) {
        } else {
            $('#listenBeat, #aboutPedal').css({
            'background': '#FFFFFF'
            });
        }
        });

        if(( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) {
        $('#actions').css({
            'height': '140px'
        });
        $('#playMode, #aboutPedal').css({
            'width': '220px',
            'background': pedal.hex,
            'float': 'none',
            'margin': '10px auto'
        });
        $('#playMode > span, #aboutPedal > span').css({
            'display': 'inline-block'
        });
        $('#playMode > span').html('Play Mode');
        $('#listenBeat, #download, #fullscreenMode').css({
            'display': 'none'
        });
        $('#playMode').css({
            'display': 'block'
        });
        }

        function shuffle(arra1) {
        var ctr = arra1.length, temp, index;
        while (ctr > 0) {
            index = Math.floor(Math.random() * ctr);
            ctr--;
            temp = arra1[ctr];
            arra1[ctr] = arra1[index];
            arra1[index] = temp;
        }
        return arra1;
        }

        // ===== Full browser mode in Pedal.html =====

        function fullScreenStart() {
        $('#pedal, .morePedalsContainer').fadeOut(500);
        $('footer, .info, .title-small, .title-pedal, .footerLogo, .header').css({
        'display':'none'
        });
        $('#mobileLogo, #showAll, #pauseMobile, #playModeIcons').css({
        'display':'block'
        });
        $('#playModeHeader').css({
        'display':'flex'
        });
        $("body").css("overflow", "hidden");
        };

        function fullScreenLandscape() {
        $('#pedal, .morePedalsContainer').fadeOut(500);
        $('footer, #playModeHeader, .header, .info, .title-small, .title-pedal, .footerLogo').css({
        'display':'none'
        });
        $('#mobileLogo, #showAll, #pauseMobile, #playModeIcons').css({
        'display':'block'
        });
        $('#tapKeyWrap').css({
        'grid-template-columns': 'auto auto auto auto',
        'height' : 'calc(100% - 100px)',
        'margin' : '80px 20px 20px 20px'
        });
        $('.tapKey').css({
        'margin': '6px'
        });
        $('#playModeIcons').css({
        'top' : '0'
        });
        $('#mobileLogo').css({
        'top': '15px'
        });
        $("body").css("overflow", "hidden");
        };

        function tapKeys() {
        $('#tapKeyWrap').css({
        'display':'grid'
        });
        };

        $('#fullscreenMode, #playMode').click(function () {
        if(( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) | (navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)) { 
        // Mobile Play mode (Full Screen + Beat Play)
        if($(window).height() < $(window).width()){
            fullScreenLandscape();
        } else {
            fullScreenStart();
        }
        //  openFullscreen()
        tapKeys(); 
        } else {
        // Full screen mode (HD)
        fullScreenStart();
        }
        });

        // Back from Full browser mode

        function fullScreenEnd() {
        $('#pedal, .morePedalsContainer').fadeIn(300);
        $('#showAll, #pauseMobile').css({
        'display': 'none'});
        $('footer, .info, .title-small, .title-pedal').css({
            'display':'block'
        });
        $('.footerLogo').css({
        'display':'inline'
        });
        $('.header').css({
            'display':'block'
        });
        $('#playModeHeader, #mobileLogo, #showAll, #pauseMobile, #playModeIcons').css({
        'display':'none'
        });
        $('#tapKeyWrap').css({
        'grid-template-columns': 'auto auto auto',
        'height' : 'calc(100% - 180px)',
        'margin' : '80px 20px 100px 20px'
        });
        $('.tapKey').css({
        'margin': '8px'
        });
        $('#playModeIcons').css({
        'bottom' : '0',
        'top' : 'unset'
        });
        $('#mobileLogo').css({
        'bottom': '15px',
        'top': 'unset'
        });
        $("body").css("overflow", "auto");
        }

        function tapKeysEnd() {
        $('#tapKeyWrap').css({
        'display':'none'
        });
        };

        $('#showAll').click(function () { 
            tapKeysEnd(); 
            fullScreenEnd();
        //    closeFullscreen()
        });
        </script>

        <script> /// More Pedals 
        function openCloseAccordion() {
        if($('#pedalAccordionButton').hasClass('closeAccordion')) {
            if (($(window).width() < 600)) {
            $('#morePedals').css({
                'height':'270px'
            });
            } else {
            $('#morePedals').css({
                'height':'160px'
            });
            }
            $('#pedalAccordionButton').html('SEE MORE PEDALS');
            $('#pedalAccordionButton').removeClass('closeAccordion');
            $('#pedalAccordionButton').addClass('openAccordion');
        } else {
            $('#morePedals').css({
            'height':'auto'
            });
            $('#pedalAccordionButton').html('SEE LESS PEDALS');
            $('#pedalAccordionButton').removeClass('openAccordion');
            $('#pedalAccordionButton').addClass('closeAccordion');
            $('html, body').animate({
            scrollTop: $('#pedalAccordionButton').offset().top
            }, 1000);
        }
        }
        </script>

        <script> //// Language
        var languageEn = <%- JSON.stringify(language[0]) %> ;
        var languageJp = <%- JSON.stringify(language[1]) %> ;

        function langIconFocus() {
            if (localStorage.getItem("language") == 'jp') {
                $('.jp').addClass('languageActive');
                $('.en').removeClass('languageActive');
            } else {
                $('.en').addClass('languageActive');
                $('.jp').removeClass('languageActive');
            }
        };

        function getLanguage() {
            (localStorage.getItem('language') == null) ? setLanguage('en') : true ;
            var languageData = (localStorage.getItem('language') == 'en') ? languageEn : languageJp ;
            $('#aboutOP').html( languageData.aboutOP );
            $('#howToPlay').html( languageData.howToPlay );
            $('#freeSamplePack').html( languageData.freeSamplePack );
            $('#credit').html( languageData.credits );
            $('#modalMessage').html(languageData.modalMessage);
            $('#bannerTop').html(languageData.bannerEqdMerch);
            $('#bannerLeft').html(languageData.bannerVerTwo);
            $('#bannerRight').html(languageData.bannerAboutEqd);
            $('#bannerTopLink').attr("href", languageData.bannerTopUrl);
            $('#bannerLeftLink').attr("href", languageData.bannerLeftUrl);
            $('#bannerRightLink').attr("href", languageData.bannerRightUrl);
            $('#verTwoText').html(languageData.versionTwoBody);
            $('.footerLogoEQD').attr("href", languageData.footerEQDUrl);
            $('#cookie-text').html(languageData.cookiText);
            $('#accept').html(languageData.cookieAccept);
            $('#decline').html(languageData.cookieDecline);

            langIconFocus();

            if (localStorage.getItem('language') == 'jp') {
                $('#aboutPedalBtn').attr('href', pedal.eqdurlJP);
                $('#onomoInfo').html(pedal.onomoDescJP);
                $('#pedalInfo').html(pedal.pedalinfoJP);
            } else if (localStorage.getItem('language') == 'en') {
                $('#aboutPedalBtn').attr('href', pedal.eqdurl);
                $('#onomoInfo').html(pedal.onomoDesc);
                $('#pedalInfo').html(pedal.pedalinfo);
            }
        };

        function setLanguage(lang) {
            localStorage.setItem('language', lang);
        }

        // ===== Language Switch =====

        $('.en').click(function(){
            $('.en').addClass('languageActive');
            $('.jp').removeClass('languageActive');
            localStorage.setItem('language', 'en');
            getLanguage();
        });

        $('.jp').click(function(){
            $('.jp').addClass('languageActive');
            $('.en').removeClass('languageActive');
            localStorage.setItem('language', 'jp');
            getLanguage();
        });

        // ===== Right side sliding panel =====

        $(document).ready( function() {
            getLanguage();
            $('#sidepanelLogos').html("<a href='https://www.patternbased.com/' target='_blank' onclick='handlePBLogoClicks()'><img src='../images/v1/PatternBased_Logo_CL.png' class='sidepanelLogo'></a><a href='https://www.earthquakerdevices.com/' target='_blank' onclick='handleEQDLogoClicks()'><img src='../images/v1/EarthQuaker-Devices-Logo_dark.png' class='sidepanelLogo'></a><p>© 2020-2021 PatternBased and EarthQuaker Devices. All Rights Reserved.</p>");
        });

        $('.info').click(function () {
            $('.rightSPWrapper, #rightSPHeader').css({
            'right':'0', 
            'transition-duration':'300ms'});
        });
        $('.close').click(function () { 
            $('.rightSPWrapper, #rightSPHeader').css({
            'right':'-480px', 
            'transition-duration':'300ms'});
        });

        $(document).on('click', '#orlandoTrigger', function () {
            $('img#orlandBunny').addClass('bunnyShowup');
            if($('img#corabelleBunny').hasClass('bunnyShowup')) {
                $('#pyonpyonBubble').css({
                'display' : 'inline',
                });
                setTimeout( function() {
                $('#pyonpyonBubble').css({
                    'opacity' : '1',
                    'transition-delay' : '1000ms',
                    'transition-duration' : '200ms'
                })   }, 100);
            }
        });

        $(document).on('click', '#corabelleTrigger', function () {
                $('img#corabelleBunny').addClass('bunnyShowup');
                if($('img#orlandBunny').hasClass('bunnyShowup')) {
                $('#pyonpyonBubble').css({
                    'display' : 'inline'
                });
                setTimeout( function() {
                    $('#pyonpyonBubble').css({
                    'opacity' : '1',
                    'transition-delay' : '1000ms',
                    'transition-duration' : '200ms'
                    })   }, 100);
                }
        });
        </script>
        <script type="text/javascript" src="../js/v1script.js"></script>
    </body>
    </html>